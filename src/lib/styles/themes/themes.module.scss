/// @group theme-general

@import 'baseTheme/baseTheme.module.scss';

@import 'purpleStormTheme/purpleStormTheme.module.scss';

@import 'purplePlainTheme/purplePlainTheme.module.scss';

@import 'imaginationRainbowTheme/imaginationRainbowTheme.module.scss';

/// List of themes available with corresponding values
$themes: (
  base: $baseTheme,
  storm: $purpleStormTheme,
  plain: $purplePlainTheme,
  rainbow: $imaginationRainbowTheme,
);

/// Generated css styles for each available theme in $themes variable
@mixin themify() {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

/// @param {string} $key - Variable name on theme
/// @return {string} Value from the theme corresponding to the variable received by parameter
@function themed($key) {
  @return map-get($theme-map, $key);
}
